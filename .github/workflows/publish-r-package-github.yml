name: publish R package

on:
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

permissions:
  contents: write  # Allows pushing changes to the repository

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: install and configure git
        run: |
          sudo apt-get update -qq && sudo apt-get -y --no-install-recommends install software-properties-common
          sudo add-apt-repository ppa:git-core/ppa -y
          sudo apt-get update -qq && sudo apt-get -y --no-install-recommends install \
            git \
            libcurl4-openssl-dev \
            libssl-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev 
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory '*'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Collect commit messages for changelog
        id: changelog
        run: |
          # Check if any previous tags exist
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            latest_tag=$(git describe --tags --abbrev=0)
            commit_messages=$(git log $latest_tag..HEAD --pretty=format:"- %s")
          else
            commit_messages=$(git log --pretty=format:"- %s")
          fi

          # Save commit messages to a GitHub Actions output, only if they exist
          if [ -n "$commit_messages" ]; then
            echo "::set-output name=messages::$commit_messages"
          else
            echo "No new commit messages to include."
          fi

      - name: Read package version
        id: get_version
        run: |
          version=$(grep '^Version:' DESCRIPTION | awk '{print $2}')
          echo "Package version is $version"
          echo "::set-output name=version::$version"

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.1'  # Specify your desired R version

      - name: Restore renv environment
        run: |
          Rscript -e "install.packages('renv')"
          Rscript -e "install.packages('devtools')"    
          Rscript -e "renv::restore()"
  
      - name: Build and check package
        run: |
          Rscript -e "devtools::install_deps(dependencies = TRUE)"
          R CMD build . --no-manual --no-build-vignettes
          R CMD check --no-manual --no-vignettes *.tar.gz
  
      - name: Update NEWS.md
        if: steps.changelog.outputs.messages  # Only run if there are new messages
        run: |
          if [ ! -f NEWS.md ]; then
            echo "Creating NEWS.md file."
            touch NEWS.md
            echo "# Changelog" > NEWS.md
          fi  
          # Append new section to NEWS.md with version and date
          echo -e "\n## $(date +'%Y-%m-%d') - v${{ steps.get_version.outputs.version }}\n" >> NEWS.md
          echo "${{ steps.changelog.outputs.messages }}" >> NEWS.md
          
          # Check if NEWS.md changed before committing
          if [ -n "$(git status --porcelain NEWS.md)" ]; then
            git add NEWS.md
            git commit -m "Update NEWS.md for release ${{ steps.get_version.outputs.version }}"
            git push
          else
            echo "No changes to NEWS.md, skipping commit."
          fi

      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the GitHub release
          gh release create "v${{ steps.get_version.outputs.version }}" --title "Release v${{ steps.get_version.outputs.version }}" *.tar.gz

      - name: Tag the release
        id: tag_release
        run: |
          # Get the version from the previous step
          version="${{ steps.get_version.outputs.version }}"
          # Create the tag
          git tag "v$version"
          git push origin "v$version"  # Push the tag to the repository
  