[{"path":"https://joergsesterhenn.github.io/medaco-plot/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 medacoPlot authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joerg Sesterhenn. Author, maintainer.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sesterhenn J (2025). medacoPlot: Renders plots medaco csv data. R package version 1.1.0, https://joergsesterhenn.github.io/medaco-plot/.","code":"@Manual{,   title = {medacoPlot: Renders plots of medaco csv data},   author = {Joerg Sesterhenn},   year = {2025},   note = {R package version 1.1.0},   url = {https://joergsesterhenn.github.io/medaco-plot/}, }"},{"path":"https://joergsesterhenn.github.io/medaco-plot/index.html","id":"medacoplot","dir":"","previous_headings":"","what":"Renders plots of medaco csv data","title":"Renders plots of medaco csv data","text":"Moderne Smartmeter stellen Einspeise- und Lieferdaten über Onlineportale bereit. Zusätzlich gibt es die Rohdaten auch CSV-Form. Die Shiny app medacoPlot erlaubt es diese einem Ordner abgelegten CSV Dateien zu visualisieren.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/index.html","id":"r-package","dir":"","previous_headings":"","what":"R package","title":"Renders plots of medaco csv data","text":"Das R package medacoPlot exportiert die Methoden zum Einlesen der Daten, zur Datenmanipulation und zum Plotten der Daten. Durch installieren des package können die Funktionen ohne die Shiny App genutzt werden.","code":"install.packages(     'medacoPlot',     repos = c(         'https://joergsesterhenn.r-universe.dev',         'https://cloud.r-project.org'     ) )"},{"path":"https://joergsesterhenn.github.io/medaco-plot/index.html","id":"docker-image-bauen","dir":"","previous_headings":"","what":"Docker image bauen","title":"Renders plots of medaco csv data","text":"","code":"docker build -t medaco-plot ."},{"path":"https://joergsesterhenn.github.io/medaco-plot/index.html","id":"docker-image-ausführen","dir":"","previous_headings":"","what":"Docker image ausführen","title":"Renders plots of medaco csv data","text":"Das Verzeichnis mit den csv-Dateien muss den Container gemounted werden. Per Default erwartet der Container die Daten im Verzeichnis /data. Dieser Ordner kann durch setzen der Umgebungsvariablen MEDACO_DATA überschrieben werden. Es wird rekursiv diesem Verzeichnis nach csv Daten gesucht. Alle Daten werden aggregiert und visualisiert. Der aktuelle Stand des Images kann auch direkt aus der github container registry bezogen werden:","code":"docker run -v /local/path/to/csvs:/data -it --rm -p 3838:3838 medaco-plot docker run -v /local/path/to/csvs:/data -it --rm -p 3838:3838 ghcr.io/joergsesterhenn/medaco-plot:main"},{"path":"https://joergsesterhenn.github.io/medaco-plot/index.html","id":"shiny-app","dir":"","previous_headings":"","what":"Shiny App","title":"Renders plots of medaco csv data","text":"Das Projekt kann auch ausgecheckt und als Shiny app gestartet werden. Wenn die Umgebungsvariable MEDACO_DATA auf das Verzeichnis mit den zu visualisierenden Daten gesetzt ist, werden diese visualisiert. Andernfalls kann über die Oberfläche ein Ordner ausgewählt werden.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/index.html","id":"entwicklung","dir":"","previous_headings":"","what":"Entwicklung","title":"Renders plots of medaco csv data","text":"Für die Entwicklung wird R (>=4.4.2) verwendet. Medaco-Plot wird VSCode entwickelt. Im Code werden Referenzen außerhalb von base immer explizit angegeben. Folgende Befehle sind bei der Entwicklung hilfreich:","code":"# Abhängigkeiten installieren renv::restore()  # Geänderte Abhängigkeiten festschreiben renv::snapshot()  # run tests devtools::test()  # check coverage covr::package_coverage()  # check package consistency devtools::check()"},{"path":[]},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_daily_data_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Daily Data in Long Format — get_daily_data_long","title":"Get Daily Data in Long Format — get_daily_data_long","text":"Aggregates reshapes data day, returning long format.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_daily_data_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Daily Data in Long Format — get_daily_data_long","text":"","code":"get_daily_data_long(power_data, year_to_plot = 2024)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_daily_data_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Daily Data in Long Format — get_daily_data_long","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year filter dataframe.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_daily_data_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Daily Data in Long Format — get_daily_data_long","text":"data frame daily total_input total_output values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_daily_data_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Daily Data in Long Format — get_daily_data_long","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) get_daily_data_long(power_data) #> # A tibble: 740 × 3 #>    day        type         value #>    <date>     <chr>        <dbl> #>  1 2024-01-01 total_input     NA #>  2 2024-01-01 total_output    NA #>  3 2024-01-02 total_input     NA #>  4 2024-01-02 total_output    NA #>  5 2024-01-03 total_input     NA #>  6 2024-01-03 total_output    NA #>  7 2024-01-04 total_input     NA #>  8 2024-01-04 total_output    NA #>  9 2024-01-05 total_input     NA #> 10 2024-01-05 total_output    NA #> # ℹ 730 more rows"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_plot_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for plot type to present it next to the plot. — get_data_for_plot_type","title":"Get data for plot type to present it next to the plot. — get_data_for_plot_type","text":"Get data plot type present next plot.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_plot_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for plot type to present it next to the plot. — get_data_for_plot_type","text":"","code":"get_data_for_plot_type(plot_type, power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_plot_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for plot type to present it next to the plot. — get_data_for_plot_type","text":"plot_type name selected plot type. power_data data frame timestamp, INPUT, OUTPUT columns.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_plot_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data for plot type to present it next to the plot. — get_data_for_plot_type","text":"data frame values matching plot.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_plot_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data for plot type to present it next to the plot. — get_data_for_plot_type","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) get_data_for_plot_type(\"by hour per month lines\", power_data) #> # A tibble: 4 × 4 #>   month   hour  type         value #>   <chr>   <chr> <chr>        <dbl> #> 1 2000-01 01    total_input      3 #> 2 2000-01 01    total_output     7 #> 3 2000-02 02    total_input      7 #> 4 2000-02 02    total_output     3"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter dataframe for data of one specified year only. — get_data_for_year","title":"Filter dataframe for data of one specified year only. — get_data_for_year","text":"Filter dataframe data one specified year .","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter dataframe for data of one specified year only. — get_data_for_year","text":"","code":"get_data_for_year(power_data, selected_year)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter dataframe for data of one specified year only. — get_data_for_year","text":"power_data data frame timestamp columns. selected_year year return data.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter dataframe for data of one specified year only. — get_data_for_year","text":"data frame data selected year.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_data_for_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter dataframe for data of one specified year only. — get_data_for_year","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2001-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2002-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2003-02-02 02:00:00\", tz = \"UTC\")   ),   total_input = c(1.0, 2.0, 3.0, 4.0),   total_output = c(4.0, 3.0, 2.0, 1.0) ) get_data_for_year(power_data, 2002) #>             timestamp total_input total_output #> 1 2002-02-01 02:00:00           3            2"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_files_in_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get List of Files in Directory — get_files_in_path","title":"Get List of Files in Directory — get_files_in_path","text":"Retrieves list .CSV files specified directory.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_files_in_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get List of Files in Directory — get_files_in_path","text":"","code":"get_files_in_path(data_path)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_files_in_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get List of Files in Directory — get_files_in_path","text":"data_path Character string specifying directory path search.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_files_in_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get List of Files in Directory — get_files_in_path","text":"character vector file paths .CSV files directory.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_files_in_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get List of Files in Directory — get_files_in_path","text":"","code":"get_files_in_path(\"data/\") #> character(0)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_data_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Hourly Data in Long Format — get_hourly_data_long","title":"Get Hourly Data in Long Format — get_hourly_data_long","text":"Aggregates reshapes data hour, returning long format.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_data_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Hourly Data in Long Format — get_hourly_data_long","text":"","code":"get_hourly_data_long(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_data_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Hourly Data in Long Format — get_hourly_data_long","text":"power_data data frame timestamp, INPUT, OUTPUT columns.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_data_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Hourly Data in Long Format — get_hourly_data_long","text":"data frame hourly total_input total_output values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_data_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Hourly Data in Long Format — get_hourly_data_long","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) get_hourly_data_long(power_data) #> # A tibble: 4 × 3 #>   hour  type         value #>   <chr> <chr>        <dbl> #> 1 01    total_input      3 #> 2 01    total_output     7 #> 3 02    total_input      7 #> 4 02    total_output     3"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_monthly_data_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Hourly and Monthly Data in Long Format — get_hourly_monthly_data_long","title":"Get Hourly and Monthly Data in Long Format — get_hourly_monthly_data_long","text":"Aggregates reshapes data hour month, returning .","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_monthly_data_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Hourly and Monthly Data in Long Format — get_hourly_monthly_data_long","text":"","code":"get_hourly_monthly_data_long(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_monthly_data_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Hourly and Monthly Data in Long Format — get_hourly_monthly_data_long","text":"power_data data frame timestamp, INPUT, OUTPUT columns.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_monthly_data_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Hourly and Monthly Data in Long Format — get_hourly_monthly_data_long","text":"data frame hourly monthly values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_hourly_monthly_data_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Hourly and Monthly Data in Long Format — get_hourly_monthly_data_long","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) get_hourly_monthly_data_long(power_data) #> # A tibble: 4 × 4 #>   month   hour  type         value #>   <chr>   <chr> <chr>        <dbl> #> 1 2000-01 01    total_input      3 #> 2 2000-01 01    total_output     7 #> 3 2000-02 02    total_input      7 #> 4 2000-02 02    total_output     3"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_monthly_data_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Monthly Data in Long Format — get_monthly_data_long","title":"Get Monthly Data in Long Format — get_monthly_data_long","text":"Aggregates reshapes data month, returning long format.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_monthly_data_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Monthly Data in Long Format — get_monthly_data_long","text":"","code":"get_monthly_data_long(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_monthly_data_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Monthly Data in Long Format — get_monthly_data_long","text":"power_data data frame timestamp, INPUT, OUTPUT columns.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_monthly_data_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Monthly Data in Long Format — get_monthly_data_long","text":"data frame monthly total_input total_output values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_monthly_data_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Monthly Data in Long Format — get_monthly_data_long","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) get_monthly_data_long(power_data) #> # A tibble: 4 × 3 #>   year_month type         value #>   <chr>      <chr>        <dbl> #> 1 2000-01    total_input      3 #> 2 2000-01    total_output     7 #> 3 2000-02    total_input      7 #> 4 2000-02    total_output     3"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_yearly_data_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Monthly Data in Long Format — get_yearly_data_long","title":"Get Monthly Data in Long Format — get_yearly_data_long","text":"Aggregates reshapes data year, returning long format.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_yearly_data_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Monthly Data in Long Format — get_yearly_data_long","text":"","code":"get_yearly_data_long(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_yearly_data_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Monthly Data in Long Format — get_yearly_data_long","text":"power_data data frame timestamp, INPUT, OUTPUT columns.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_yearly_data_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Monthly Data in Long Format — get_yearly_data_long","text":"data frame yearly total_input total_output values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_yearly_data_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Monthly Data in Long Format — get_yearly_data_long","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) get_monthly_data_long(power_data) #> # A tibble: 4 × 3 #>   year_month type         value #>   <chr>      <chr>        <dbl> #> 1 2000-01    total_input      3 #> 2 2000-01    total_output     7 #> 3 2000-02    total_input      7 #> 4 2000-02    total_output     3"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_years_in_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of years for which data is available in a dataframe. — get_years_in_data","title":"Get a list of years for which data is available in a dataframe. — get_years_in_data","text":"Get list years data available dataframe.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_years_in_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of years for which data is available in a dataframe. — get_years_in_data","text":"","code":"get_years_in_data(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_years_in_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of years for which data is available in a dataframe. — get_years_in_data","text":"power_data data frame timestamp columns.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_years_in_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of years for which data is available in a dataframe. — get_years_in_data","text":"data frame year column corresponding values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/get_years_in_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a list of years for which data is available in a dataframe. — get_years_in_data","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2001-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2002-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2003-02-02 02:00:00\", tz = \"UTC\")   ),   total_input = c(1.0, 2.0, 3.0, 4.0),   total_output = c(4.0, 3.0, 2.0, 1.0) ) get_years_in_data(power_data) #>   year #> 1 2000 #> 2 2001 #> 3 2002 #> 4 2003"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/medacoPlot-package.html","id":null,"dir":"Reference","previous_headings":"","what":"medacoPlot: Renders plots of medaco csv data — medacoPlot-package","title":"medacoPlot: Renders plots of medaco csv data — medacoPlot-package","text":"Plot power input output.","code":""},{"path":[]},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/medacoPlot-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"medacoPlot: Renders plots of medaco csv data — medacoPlot-package","text":"Maintainer: Joerg Sesterhenn joerg.sesterhenn@gmail.com","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/pivot_longer_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot Data to Long Format for Input and Output — pivot_longer_data","title":"Pivot Data to Long Format for Input and Output — pivot_longer_data","text":"Transforms data wide format long format, creating separate rows total_input total_output.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/pivot_longer_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot Data to Long Format for Input and Output — pivot_longer_data","text":"","code":"pivot_longer_data(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/pivot_longer_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot Data to Long Format for Input and Output — pivot_longer_data","text":"power_data data frame timestamp, INPUT, OUTPUT columns.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/pivot_longer_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot Data to Long Format for Input and Output — pivot_longer_data","text":"data frame long format type column indicating input output, value column corresponding values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/pivot_longer_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot Data to Long Format for Input and Output — pivot_longer_data","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   total_input = c(1.0, 2.0, 3.0, 4.0),   total_output = c(4.0, 3.0, 2.0, 1.0) ) pivot_longer_data(power_data) #> # A tibble: 8 × 3 #>   timestamp           type         value #>   <dttm>              <chr>        <dbl> #> 1 2000-01-01 01:00:00 total_input      1 #> 2 2000-01-01 01:00:00 total_output     4 #> 3 2000-01-02 01:00:00 total_input      2 #> 4 2000-01-02 01:00:00 total_output     3 #> 5 2000-02-01 02:00:00 total_input      3 #> 6 2000-02-01 02:00:00 total_output     2 #> 7 2000-02-02 02:00:00 total_input      4 #> 8 2000-02-02 02:00:00 total_output     1"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Plot Function — plot","title":"Generic Plot Function — plot","text":"Selects plot function based specified type plots dataset.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Plot Function — plot","text":"","code":"plot(plot_type, power_data, display_mode = \"dark\", year_to_plot = 2024)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Plot Function — plot","text":"plot_type Character, plot type dropdown menu. power_data data frame timestamp, INPUT, OUTPUT columns. display_mode decides whether plot dark light. year_to_plot year plot dataframe.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Plot Function — plot","text":"ggplot object created appropriate plotting function.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Plot Function — plot","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot(\"by month\", power_data, \"light\", 2000)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_calendar_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Calendar Heatmap Chart — plot_by_day_per_year_calendar_heatmap","title":"Generate Calendar Heatmap Chart — plot_by_day_per_year_calendar_heatmap","text":"Creates calendar heatmap chart show input/output data per day.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_calendar_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Calendar Heatmap Chart — plot_by_day_per_year_calendar_heatmap","text":"","code":"plot_by_day_per_year_calendar_heatmap(   power_data,   year_to_plot = 2024,   display_mode = \"dark\" )"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_calendar_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Calendar Heatmap Chart — plot_by_day_per_year_calendar_heatmap","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode decides whether plot dark light.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_calendar_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Calendar Heatmap Chart — plot_by_day_per_year_calendar_heatmap","text":"ggplot object chart.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_calendar_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Calendar Heatmap Chart — plot_by_day_per_year_calendar_heatmap","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_day_per_year_calendar_heatmap(power_data, 2000) #> Warning: OS reports request to set locale to \"de_DE.UTF-8\" cannot be honored"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_top_10_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Bar Chart of top 10 days of power input vs output — plot_by_day_per_year_top_10_bars","title":"Generate a Bar Chart of top 10 days of power input vs output — plot_by_day_per_year_top_10_bars","text":"Creates Bar Chart also displays mean percentile values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_top_10_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Bar Chart of top 10 days of power input vs output — plot_by_day_per_year_top_10_bars","text":"","code":"plot_by_day_per_year_top_10_bars(   power_data,   year_to_plot = 2024,   display_mode = \"dark\" )"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_top_10_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Bar Chart of top 10 days of power input vs output — plot_by_day_per_year_top_10_bars","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode decides whether plot dark light.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_top_10_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Bar Chart of top 10 days of power input vs output — plot_by_day_per_year_top_10_bars","text":"ggplot object chart.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_day_per_year_top_10_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Bar Chart of top 10 days of power input vs output — plot_by_day_per_year_top_10_bars","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_day_per_year_top_10_bars(power_data) #> Warning: Removed 16 rows containing missing values or values outside the scale range #> (`geom_col()`)."},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Hourly Data by Month — plot_by_hour_per_month_bars","title":"Plot Hourly Data by Month — plot_by_hour_per_month_bars","text":"Generates bar plot showing hourly input output sums month.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Hourly Data by Month — plot_by_hour_per_month_bars","text":"","code":"plot_by_hour_per_month_bars(   power_data,   year_to_plot = 2024,   display_mode = \"dark\" )"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Hourly Data by Month — plot_by_hour_per_month_bars","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode decides whether plot dark light.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Hourly Data by Month — plot_by_hour_per_month_bars","text":"ggplot object showing hourly values month facets.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Hourly Data by Month — plot_by_hour_per_month_bars","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_hour_per_month_bars(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Heatmap of Hourly Data by Month — plot_by_hour_per_month_heatmap","title":"Generate a Heatmap of Hourly Data by Month — plot_by_hour_per_month_heatmap","text":"Creates heatmap show hourly input output data across months.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Heatmap of Hourly Data by Month — plot_by_hour_per_month_heatmap","text":"","code":"plot_by_hour_per_month_heatmap(   power_data,   year_to_plot = 2024,   display_mode = \"dark\" )"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Heatmap of Hourly Data by Month — plot_by_hour_per_month_heatmap","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode decides whether plot dark light.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Heatmap of Hourly Data by Month — plot_by_hour_per_month_heatmap","text":"ggplot object heatmap representing input/output.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Heatmap of Hourly Data by Month — plot_by_hour_per_month_heatmap","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_hour_per_month_heatmap(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Line Chart of Hourly Data by Month — plot_by_hour_per_month_lines","title":"Generate a Line Chart of Hourly Data by Month — plot_by_hour_per_month_lines","text":"Creates line chart show input/output data hour month.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Line Chart of Hourly Data by Month — plot_by_hour_per_month_lines","text":"","code":"plot_by_hour_per_month_lines(   power_data,   year_to_plot = 2024,   display_mode = \"dark\" )"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Line Chart of Hourly Data by Month — plot_by_hour_per_month_lines","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode decides whether plot dark light.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Line Chart of Hourly Data by Month — plot_by_hour_per_month_lines","text":"ggplot object line chart.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Line Chart of Hourly Data by Month — plot_by_hour_per_month_lines","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_hour_per_month_lines(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_ridgelines.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Ridgeline Plot of Hourly Data by Month — plot_by_hour_per_month_ridgelines","title":"Generate a Ridgeline Plot of Hourly Data by Month — plot_by_hour_per_month_ridgelines","text":"Creates ridgeline plot show distribution input/output data month.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_ridgelines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Ridgeline Plot of Hourly Data by Month — plot_by_hour_per_month_ridgelines","text":"","code":"plot_by_hour_per_month_ridgelines(   power_data,   year_to_plot = 2024,   display_mode = \"dark\" )"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_ridgelines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Ridgeline Plot of Hourly Data by Month — plot_by_hour_per_month_ridgelines","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode year plot dataframe.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_ridgelines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Ridgeline Plot of Hourly Data by Month — plot_by_hour_per_month_ridgelines","text":"ggplot object ridgeline plot.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_ridgelines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Ridgeline Plot of Hourly Data by Month — plot_by_hour_per_month_ridgelines","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 01:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_hour_per_month_ridgelines(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_stacked_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Stacked Area Chart of Hourly Data by Month — plot_by_hour_per_month_stacked_areas","title":"Generate a Stacked Area Chart of Hourly Data by Month — plot_by_hour_per_month_stacked_areas","text":"Creates stacked area chart visualize input/output data month.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_stacked_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Stacked Area Chart of Hourly Data by Month — plot_by_hour_per_month_stacked_areas","text":"","code":"plot_by_hour_per_month_stacked_areas(   power_data,   year_to_plot = 2024,   display_mode = \"dark\" )"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_stacked_areas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Stacked Area Chart of Hourly Data by Month — plot_by_hour_per_month_stacked_areas","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode decides whether plot dark light.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_stacked_areas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Stacked Area Chart of Hourly Data by Month — plot_by_hour_per_month_stacked_areas","text":"ggplot object stacked area chart.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_month_stacked_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Stacked Area Chart of Hourly Data by Month — plot_by_hour_per_month_stacked_areas","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_hour_per_month_stacked_areas(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_year_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Aggregated Data by Hour — plot_by_hour_per_year_bars","title":"Plot Aggregated Data by Hour — plot_by_hour_per_year_bars","text":"Generates bar plot showing hourly input output sums.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_year_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Aggregated Data by Hour — plot_by_hour_per_year_bars","text":"","code":"plot_by_hour_per_year_bars(   power_data,   year_to_plot = 2024,   display_mode = \"dark\" )"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_year_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Aggregated Data by Hour — plot_by_hour_per_year_bars","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode decides whether plot dark light.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_year_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Aggregated Data by Hour — plot_by_hour_per_year_bars","text":"ggplot object showing hourly aggregated values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_hour_per_year_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Aggregated Data by Hour — plot_by_hour_per_year_bars","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_hour_per_year_bars(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_month_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Aggregated Data by Month — plot_by_month_bars","title":"Plot Aggregated Data by Month — plot_by_month_bars","text":"Generates bar plot showing monthly input output sums.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_month_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Aggregated Data by Month — plot_by_month_bars","text":"","code":"plot_by_month_bars(power_data, year_to_plot = 2024, display_mode = \"dark\")"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_month_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Aggregated Data by Month — plot_by_month_bars","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode decides whether plot dark light.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_month_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Aggregated Data by Month — plot_by_month_bars","text":"ggplot object showing monthly aggregated values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_month_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Aggregated Data by Month — plot_by_month_bars","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_month_bars(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_year_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Aggregated Data by Year — plot_by_year_bars","title":"Plot Aggregated Data by Year — plot_by_year_bars","text":"Generates bar plot showing yearly input output sums.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_year_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Aggregated Data by Year — plot_by_year_bars","text":"","code":"plot_by_year_bars(power_data, year_to_plot = 2024, display_mode = \"dark\")"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_year_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Aggregated Data by Year — plot_by_year_bars","text":"power_data data frame timestamp, INPUT, OUTPUT columns. year_to_plot year plot dataframe. display_mode decides whether plot dark light.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_year_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Aggregated Data by Year — plot_by_year_bars","text":"ggplot object showing yearly aggregated values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_by_year_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Aggregated Data by Year — plot_by_year_bars","text":"","code":"# Example using a small sample data frame power_data <- data.frame(   timestamp = c(     as.POSIXct(\"2000-01-01 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-01-02 01:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-01 02:00:00\", tz = \"UTC\"),     as.POSIXct(\"2000-02-02 02:00:00\", tz = \"UTC\")   ),   INPUT = c(1.0, 2.0, 3.0, 4.0),   OUTPUT = c(4.0, 3.0, 2.0, 1.0) ) plot_by_year_bars(power_data)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Map of Dropdown Items to Plot Functions — plot_map","title":"Map of Dropdown Items to Plot Functions — plot_map","text":"data frame mapping dropdown box items corresponding plot functions.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map of Dropdown Items to Plot Functions — plot_map","text":"","code":"plot_map"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/plot_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Map of Dropdown Items to Plot Functions — plot_map","text":"data frame dropdown items row names plot function names column values.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/read_power_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Power Data — read_power_data","title":"Read Power Data — read_power_data","text":"Reads power data .CSV files specified directory, selecting specific columns using custom locale decimal grouping marks.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/read_power_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Power Data — read_power_data","text":"","code":"read_power_data(data_path)"},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/read_power_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Power Data — read_power_data","text":"data_path Character string specifying directory containing .CSV files read.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/read_power_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Power Data — read_power_data","text":"data frame containing timestamp, input, output columns files.","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/reference/read_power_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Power Data — read_power_data","text":"","code":"read_power_data(\"data/\") #> # A tibble: 0 × 0"},{"path":"https://joergsesterhenn.github.io/medaco-plot/news/index.html","id":"medacoplot-110","dir":"Changelog","previous_headings":"","what":"medacoPlot 1.1.0","title":"medacoPlot 1.1.0","text":"language choice now translations available english german","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/news/index.html","id":"medacoplot-100","dir":"Changelog","previous_headings":"","what":"medacoPlot 1.0.0","title":"medacoPlot 1.0.0","text":"first stable version visualize power data gain insights search data details supports darkmode ui plots","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/news/index.html","id":"medacoplot-030","dir":"Changelog","previous_headings":"","what":"medacoPlot 0.3.0","title":"medacoPlot 0.3.0","text":"major redesign app renamed lot functions -> breaking change! added data view plots added initial darkmode support still needs improvements","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/news/index.html","id":"medacoplot-020","dir":"Changelog","previous_headings":"","what":"medacoPlot 0.2.0","title":"medacoPlot 0.2.0","text":"add calendar heatmap plot","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/news/index.html","id":"medacoplot-010","dir":"Changelog","previous_headings":"","what":"medacoPlot 0.1.0","title":"medacoPlot 0.1.0","text":"add top 10 plot","code":""},{"path":"https://joergsesterhenn.github.io/medaco-plot/news/index.html","id":"medacoplot-001","dir":"Changelog","previous_headings":"","what":"medacoPlot 0.0.1","title":"medacoPlot 0.0.1","text":"initial version","code":""}]
