getwd()
data <- read.csv('data/*.csv')
use_package(readr, type = "imports")
use_package(tidyverse, type = "imports")
install.packages("tidyverse")
use_package(tidyverse, type = "imports")
read_csv("data/*.csv",id = "origin_file")
read_csv("data/2024_01_EC_DATEN.CSV",id = "origin_file")
use_mit_license()
install.packages('readr')
install()
library(tidyverse)
detach("package:dplyr")
library(dplyr)
devtools::install()
read_csv("data/2024_01_EC_DATEN.CSV",id = "origin_file")
read_csv("data/*.CSV",id = "origin_file")
read_csv(power_data_files,id = "origin_file")
power_data_files <- list.files(path = "data", recursive = FALSE,
pattern = "\\.CSV$",
full.names = TRUE)
read_csv(power_data_files,id = "origin_file")
read_csv(power_data_files,skip=5,id = "origin_file")
read_csv(power_data_files,skip=5,id = "origin_file")
dat <- vroom(power_data_files)
library(vroom)
dat <- vroom(power_data_files)
print.data.frame(origin_file)
my_data <- read_csv(power_data_files,skip=5,id = "origin_file")
my_data <- read_csv(power_data_files,skip=5,id = "origin_file",delimiter=";")
my_data <- read_csv(power_data_files,skip=5,id = "origin_file",delim=";")
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file")
View(my_data)
my_data
library(gridExtra)
library(ggplot2)
install.packages(gridExtra)
install.packages("gridExtra")
usethis::use_package("readr")
library(readr)
usethis::use_package("gridExtra")
usethis::use_package("ggplot2")
devtools::install()
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !matches(""))
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !starts_With("..."))
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !"")
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = "1,2,3,5")
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = 1,2,3,5)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = 1 && 2 && 3 && 5)
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = 1 & 2 & 3 & 5)
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !(3))
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !(3,5))
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !(3 5))
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !(3) && !(5))
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !(3) && !(6))
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !(3))
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = !(''))
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select =`Datum/Zeit`)
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select =`Datum/Zeit`,3)
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select =(`Datum/Zeit`,3)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select =!(``))
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file")
View(my_data)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = `Datum/Zeit`,`DE0001815675400000503110000001323 iMS - 1-1:1.29.0`,`DE0001815675400000503110000001323 iMS - 1-1:2.29.0`)
# read to memory
my_data <- read_csv2(power_data_files,skip=5,id = "origin_file",col_select = (`Datum/Zeit`,`DE0001815675400000503110000001323 iMS - 1-1:1.29.0`,`DE0001815675400000503110000001323 iMS - 1-1:2.29.0`))
# read to memory
my_data <- read_csv2(
power_data_files,
skip=5,
id = "origin_file",
col_select ='Datum/Zeit','DE0001815675400000503110000001323 iMS - 1-1:1.29.0','DE0001815675400000503110000001323 iMS - 1-1:2.29.0'
)
my_data <- read_csv2(
power_data_files,
skip=5,
id = "origin_file",
col_select ='Datum/Zeit','DE0001815675400000503110000001323 iMS - 1-1:1.29.0','DE0001815675400000503110000001323 iMS - 1-1:2.29.0'
)
View(my_data)
my_data <- read_csv2(
power_data_files,
skip=5,
id = "origin_file",
col_select =(Datum/Zeit,DE0001815675400000503110000001323 iMS - 1-1:1.29.0,DE0001815675400000503110000001323 iMS - 1-1:2.29.0)
my_data <- read_csv2(
power_data_files,
skip=5,
id = "origin_file",
col_select =c(Datum/Zeit, DE0001815675400000503110000001323 iMS - 1-1:1.29.0, DE0001815675400000503110000001323 iMS - 1-1:2.29.0)
my_data <- read_csv2(
power_data_files,
skip=5,
id = "origin_file",
col_select =c("Datum/Zeit", "DE0001815675400000503110000001323 iMS - 1-1:1.29.0", "DE0001815675400000503110000001323 iMS - 1-1:2.29.0")
)
View(my_data)
# collect all datafiles
power_data_files <- list.files(path = "data", recursive = FALSE,
pattern = "\\.CSV$",
full.names = TRUE)
# read to memory
my_data <- read_csv2(
power_data_files,
skip=5,
id = "origin_file",
col_select =c("Datum/Zeit", "DE0001815675400000503110000001323 iMS - 1-1:1.29.0", "DE0001815675400000503110000001323 iMS - 1-1:2.29.0")
)
my_data
my_data$FixedDate <- as.Date(my_data[2],format="/%d./%m./%Y /%H:/%M")
my_data[2]
as.Date("19.01.2024 00:15")
usethis::use_package("lubridate")
devtools::install()
library(lubridate)
ymd_hms(DateTime,tz=Sys.timezone())
ymd_hms("19.01.2024 00:15",tz=Sys.timezone())
my_data$FixedDate <- as.DateTime(my_data[2],format="/%d./%m./%Y /%H:/%M")
my_data$FixedDate <- as.POSIXct(my_data[2],format="/%d./%m./%Y /%H:/%M")
as.POSIXct("19.01.2024 00:15")
parse_datetime("19.01.2024 00:15")
parse_datetime("19.01.2024 00:15",format="/%d./%m./%Y /%H:/%M")
my_data$FixedDate <- as.POSIXct(my_data[2],format="%d.%m.%Y %H:%M")
parse_datetime("19.01.2024 00:15",format="%d.%m.%Y %H:%M")
parse_datetime("19.01.2024 00:15",format="%d.%m.%Y %H:%M",tz=Sys.timezone())
my_data$FixedDate <- parse_datetime(my_data[2],format="%d.%m.%Y %H:%M")
usethis::use_package("anytime")
my_data|>
dplyr::mutate(my_data[2] = anytime::anydate(my_data[2]))
library(anytime)
my_data|>
dplyr::mutate(my_data[2] = anytime::anytime(my_data[2]))
usethis::use_package("dplyr")
library(dplyr)
library(dplyr)
my_data|>
dplyr::mutate(my_data[2] = anytime::anytime(my_data[2]))
# read to memory
my_data <- read_csv2(
power_data_files,
skip=5,
id = "origin_file",
col_names = "A", "B", "C", "D",
col_select =c("Datum/Zeit", "DE0001815675400000503110000001323 iMS - 1-1:1.29.0", "DE0001815675400000503110000001323 iMS - 1-1:2.29.0")
)
my_data <- read_csv2(
power_data_files,
skip=5,
id = "origin_file",
col_names = c("A", "B", "C"),
col_select =c("Datum/Zeit", "DE0001815675400000503110000001323 iMS - 1-1:1.29.0", "DE0001815675400000503110000001323 iMS - 1-1:2.29.0")
)
my_data <- read_csv2(
power_data_files,
skip=6,
id = "origin_file",
col_names = c("A", "B", "C","D","E"),
col_select =c("A","B", "C","D","E")
)
View(my_data)
my_data <- read_csv2(
power_data_files,
skip=6,
id = "origin_file",
col_names = c("A", "B", "C","D","E"),
col_select =c("A","B", "D")
)
View(my_data)
my_data <- read_csv2(
power_data_files,
skip=6,
id = "origin_file",
col_names = c("date", "in", "C","out","E"),
col_select =c("my_date","in", "out")
)
my_data <- read_csv2(
power_data_files,
skip=6,
id = "origin_file",
col_names = c("my_date", "in", "C","out","E"),
col_select =c("my_date","in", "out")
)
View(my_data)
my_data|>
dplyr::mutate(my_date = anytime::anytime(my_date))
my_data
my_data$my_date <- parse_datetime(my_date,format="%d.%m.%Y %H:%M")
my_data
my_data$my_date
my_data$my_date <- parse_datetime(my_data$my_date,format="%d.%m.%Y %H:%M")
my_data
df <- read_csv2(
power_data_files,
skip=6,
id = "origin_file",
col_names = c("timestamp", "input", "C","output","E"),
col_select =c("timestamp","INPUT", "OUTPUT")
)
df <- read_csv2(
power_data_files,
skip=6,
id = "origin_file",
col_names = c("timestamp", "INPUT", "C","OUTPUT","E"),
col_select =c("timestamp","INPUT", "OUTPUT")
)
my_data$my_date <- parse_datetime(my_data$my_date,format="%d.%m.%Y %H:%M")
my_data$timestamp <- parse_datetime(my_data$timestamp,format="%d.%m.%Y %H:%M")
df$timestamp <- parse_datetime(df$timestamp,format="%d.%m.%Y %H:%M")
df$year_month <- format(df$timestamp, "%Y-%m")
View(df)
monthly_data <- df %>%
group_by(year_month) %>%
summarise(
total_input = sum(INPUT, na.rm = TRUE),
total_output = sum(OUTPUT, na.rm = TRUE)
)
View(monthly_data)
ggplot(monthly_data, aes(x = year_month)) +
geom_line(aes(y = total_input, color = "Input")) +
geom_line(aes(y = total_output, color = "Output")) +
labs(title = "Monthly Input and Output Sums",
x = "Month",
y = "Sum of Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("Input" = "blue", "Output" = "red"))
View(monthly_data)
df$year_month <- floor_date(df$timestamp, "month")
View(monthly_data)
monthly_data <- df %>%
group_by(year_month) %>%
summarise(
total_input = sum(INPUT, na.rm = TRUE),
total_output = sum(OUTPUT, na.rm = TRUE)
)
# Plot the data
ggplot(monthly_data, aes(x = year_month)) +
geom_line(aes(y = total_input, color = "Input", group = 1)) +
geom_line(aes(y = total_output, color = "Output", group = 1)) +
labs(title = "Monthly Input and Output Sums",
x = "Month",
y = "Sum of Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("Input" = "blue", "Output" = "red"))
View(df)
# Create a new column for the year-month to aggregate by month
df$year_month <- floor_date(df$timestamp, "month")
# Summing INPUT and OUTPUT values for each month
monthly_data <- df %>%
group_by(year_month) %>%
summarise(
total_input = sum(INPUT, na.rm = TRUE),
total_output = sum(OUTPUT, na.rm = TRUE)
)
# Create a complete sequence of months for the entire range
all_months <- data.frame(year_month = seq(min(df$year_month), max(df$year_month), by = "month"))
# Join the complete month sequence with your existing data
monthly_data_complete <- full_join(all_months, monthly_data, by = "year_month") %>%
replace_na(list(total_input = 0, total_output = 0))
# Plot the data
ggplot(monthly_data_complete, aes(x = year_month)) +
geom_line(aes(y = total_input, color = "Input", group = 1)) +
geom_line(aes(y = total_output, color = "Output", group = 1)) +
labs(title = "Monthly Input and Output Sums",
x = "Month",
y = "Sum of Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("Input" = "blue", "Output" = "red")) +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y")
library(tidyr)
ggplot(monthly_data_complete, aes(x = year_month)) +
geom_line(aes(y = total_input, color = "Input", group = 1)) +
geom_line(aes(y = total_output, color = "Output", group = 1)) +
labs(title = "Monthly Input and Output Sums",
x = "Month",
y = "Sum of Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("Input" = "blue", "Output" = "red")) +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y")
View(monthly_data)
View(all_months)
View(monthly_data)
View(monthly_data)
gc()
# read to memory
df <- read_csv2(
power_data_files,
skip=6,
id = "origin_file",
col_names = c("timestamp", "INPUT", "C","OUTPUT","E"),
col_select =c("timestamp","INPUT", "OUTPUT")
)
power_data_files <- list.files(path = "data", recursive = FALSE,
pattern = "\\.CSV$",
full.names = TRUE)
# read to memory
df <- read_csv2(
power_data_files,
skip=6,
id = "origin_file",
col_names = c("timestamp", "INPUT", "C","OUTPUT","E"),
col_select =c("timestamp","INPUT", "OUTPUT")
)
# fix datetime
df$timestamp <- parse_datetime(df$timestamp,format="%d.%m.%Y %H:%M")
# Create a new column for the year-month to aggregate by month
df$year_month <- format(df$timestamp, "%Y-%m")
monthly_data <- df %>%
group_by(year_month) %>%
summarise(
total_input = sum(INPUT, na.rm = TRUE),
total_output = sum(OUTPUT, na.rm = TRUE)
)
# Plot the data
ggplot(monthly_data, aes(x = year_month)) +
geom_line(aes(y = total_input, color = "Input", group = 1)) +
geom_line(aes(y = total_output, color = "Output", group = 1)) +
labs(title = "Monthly Input and Output Sums",
x = "Month",
y = "Sum of Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("Input" = "blue", "Output" = "red"))
# Create a new column for the year-month to aggregate by month
df$year_month <- format(df$timestamp, "%Y-%m")
# Summing INPUT and OUTPUT values for each month
monthly_data <- df %>%
group_by(year_month) %>%
summarise(
total_input = sum(INPUT, na.rm = TRUE),
total_output = sum(OUTPUT, na.rm = TRUE)
)
# Reshape the data into long format for easy plotting of both INPUT and OUTPUT
monthly_data_long <- monthly_data %>%
pivot_longer(cols = c(total_input, total_output),
names_to = "type",
values_to = "value")
# Plot the data as bars
ggplot(monthly_data_long, aes(x = year_month, y = value, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Monthly Input and Output Sums",
x = "Month",
y = "Sum of Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("total_input" = "blue", "total_output" = "red"))
View(monthly_data)
plot_aggregated_by_month <- function(df) { # create a function with the name my_function
# Create a new column for the year-month to aggregate by month
df$year_month <- format(df$timestamp, "%Y-%m")
# Summing INPUT and OUTPUT values for each month
monthly_data <- df %>%
group_by(year_month) %>%
summarise(
total_input = sum(INPUT, na.rm = TRUE),
total_output = sum(OUTPUT, na.rm = TRUE)
)
# Reshape the data into long format for easy plotting of both INPUT and OUTPUT
monthly_data_long <- monthly_data %>%
pivot_longer(cols = c(total_input, total_output),
names_to = "type",
values_to = "value")
# Plot the data as bars
ggplot(monthly_data_long, aes(x = year_month, y = value, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Monthly Input and Output Sums",
x = "Month",
y = "Sum of Values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("total_input" = "blue", "total_output" = "red"))
}
plot_aggregated_by_month(df)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
source("Read.R")
source("Read.R")
source("Plot.R")
source("R\Read.R")
source("Read.R")
source("Plot.R")
source("Read.R")
source("R/Read.R")
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
source("R/Read.R")
source("R/Plot.R")
df = read_power_data(data_path="data")
plot_aggregated_by_month(df)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
source("R/Read.R")
source("R/Plot.R")
power_data = read_power_data(data_path="data")
plot_aggregated_by_month(power_data)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
source("R/Read.R")
source("R/Plot.R")
power_data = read_power_data(data_path="data")
#plot_aggregated_by_month(power_data)
plot_aggregated_by_hour(power_data)
source("R/Plot.R")
plot_by_hour_and_month(power_data)
source("R/Plot.R")
plot_by_hour_and_month(power_data)
plot_aggregated_by_month(power_data)
plot_aggregated_by_hour(power_data)
plot_by_hour_and_month(power_data)
plot_aggregated_by_month(power_data)
plot_aggregated_by_hour(power_data)
plot_by_hour_and_month(power_data)
source("R/Plot.R")
plot_heatmap(power_data)
source("R/Plot.R")
plot_ridgeline(power_data)
source("R/Plot.R")
plot_stacked_area(power_data)
source("R/Plot.R")
plot_line_chart(power_data)
source("R/Plot.R")
plot_ridgeline(power_data)
save.image("C:/R/power/Power.RData")
gc()
source("R/Read.R")
source("R/Plot.R")
power_data = read_power_data(data_path="data")
plot_aggregated_by_month(power_data)
plot_aggregated_by_hour(power_data)
plot_by_hour_and_month(power_data)
plot_heatmap(power_data)
plot_ridgeline(power_data)
plot_stacked_area(power_data)
plot_line_chart(power_data)
